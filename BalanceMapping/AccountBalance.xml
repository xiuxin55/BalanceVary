<?xml version="1.0" encoding="utf-8" ?>

<sqlMap namespace="AccountBalance" xmlns="http://ibatis.apache.org/mapping"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" >

  <alias>
    <typeAlias alias="AccountBalance" type="BalanceModel.AccountBalance,BalanceModel" />
  </alias>
  <resultMaps>
    <resultMap id="AccountBalanceMap" class="AccountBalance">
      <result property="RowNumber" column="RowNumber"/>
      <result property="ID" column="ID"/>
      <result property="AccountID" column="AccountID"/>
      <result property="SubAccountNumber" column="SubAccountNumber"/>
      <result property="AccountName" column="AccountName"/>
      <result property="AccountType" column="AccountType"/>
      <result property="WebsiteID" column="WebsiteID"/>
      <result property="RegularMoney" column="RegularMoney"/>
      <result property="UnRegularMoney" column="UnRegularMoney"/>
      <result property="AmountMoney" column="AmountMoney"/>
      <result property="RegularMoneyVary" column="RegularMoneyVary"/>
      <result property="UnRegularMoneyVary" column="UnRegularMoneyVary"/>
      <result property="AmountMoneyVary" column="AmountMoneyVary"/>
      <result property="Rate" column="Rate"/>
      <result property="BalanceTime" column="BalanceTime"/>
    </resultMap>
  </resultMaps> 
  <parameterMaps>
    <parameterMap id="AccountBalanceProcMap" class="AccountBalance">
      <parameter property="ID"  />
      <parameter property="AccountID"  />
      <parameter property="SubAccountNumber"  />
      <parameter property="AccountName" />

      <parameter property="AccountType"  />
      <parameter property="WebsiteID"  />
      <parameter property="StartBalanceTime"  />
      <parameter property="EndBalanceTime" />
      
      <parameter property="StartIndex"  />
      <parameter property="EndIndex"  />
      <parameter property="OrderbyColomnName"  />
      <parameter property="SubOrderbyColomnName" />
    </parameterMap>
  </parameterMaps>

  <statements>
    <select id="SelectByDepartmentCount"  resultClass="int"   parameterClass="DepartmentBalance">
      select count(*)  from  AccountLinkManagerInfo l
      left join AccountBalanceVary a on l.AccountID=a.AccountID 
      where (a.SubAccountNumber =l.SubAccountNumber or l.SubAccountNumber is null)
      <dynamic>
        <isParameterPresent>
          <isNotEmpty prepend="and" property="ID">ID=#ID#</isNotEmpty>
          <isNotEmpty prepend="and" property="DepartmentID">l.DepartmentID=#DepartmentID#</isNotEmpty>
          <isNotEmpty prepend="and" property="DepartmentName">l.DepartmentName=#DepartmentName#</isNotEmpty>
          <isNotEmpty prepend="and" property="BalanceTime">a.BalanceTime=#BalanceTime#</isNotEmpty>
        </isParameterPresent>
      </dynamic>
    </select>
    <select id="SelectByDepartment"  resultMap="AccountBalanceMap"  parameterClass="DepartmentBalance">
      select * from (
      select row_number() over(order by $OrderbyColomnName$  desc,$SubOrderbyColomnName$ desc) as RowNumber,a.ID,a.AccountID,a.SubAccountNumber,link.CompanyName as AccountName,
      a.AccountType,a.WebsiteID,a.RegularMoney,a.UnRegularMoney,a.AmountMoney,a.RegularMoneyVary,a.UnRegularMoneyVary,
      a.AmountMoneyVary,a.Rate,a.BalanceTime   from  AccountLinkManagerInfo l
      left join AccountBalanceVary a on l.AccountID=a.AccountID left join AccountAndNameLink link on l.AccountID=link.AccountID
      where (a.SubAccountNumber =l.SubAccountNumber or l.SubAccountNumber is null)
      <dynamic>
        <isParameterPresent>
          <isNotEmpty prepend="and" property="ID">ID=#ID#</isNotEmpty>
          <isNotEmpty prepend="and" property="DepartmentID">l.DepartmentID=#DepartmentID#</isNotEmpty>
          <isNotEmpty prepend="and" property="DepartmentName">l.DepartmentName=#DepartmentName#</isNotEmpty>
          <isNotEmpty prepend="and" property="BalanceTime">BalanceTime=#BalanceTime#</isNotEmpty>
        </isParameterPresent>
      </dynamic>
      )as result
      where 1=1
      <dynamic>
        <isParameterPresent>
          <isNotEmpty prepend="and" property="StartIndex"><![CDATA[result.RowNumber>=#StartIndex#]]></isNotEmpty>
          <isNotEmpty prepend="and" property="EndIndex"><![CDATA[result.RowNumber<=#EndIndex#]]></isNotEmpty>
        </isParameterPresent>
      </dynamic>
    </select>


    <select id="SelectAccountBalanceCount"  resultClass="int"   parameterClass="AccountBalance">
      select count(*) from AccountBalanceVary av left join AccountAndNameLink link on av.AccountID=link.AccountID where 1=1
      <dynamic>
        <isParameterPresent>
          <isNotEmpty prepend="and" property="ID">ID=#ID#</isNotEmpty>
          <isNotEmpty prepend="and" property="AccountID">av.AccountID=#AccountID#</isNotEmpty>
          <isNotEmpty prepend="and" property="WebsiteID">WebsiteID=#WebsiteID#</isNotEmpty>
          <isNotEmpty prepend="and" property="AccountName">link.CompanyName=#AccountName#</isNotEmpty>

          <isNotEmpty prepend="and" property="SubAccountNumber">SubAccountNumber=#SubAccountNumber#</isNotEmpty>
          <isNotEmpty prepend="and" property="BalanceTime">BalanceTime=#BalanceTime#</isNotEmpty>
          <isGreaterThan prepend="and" property="AccountType" compareValue="-1">AccountType=#AccountType#</isGreaterThan>
        </isParameterPresent>
      </dynamic>
    </select>
    <select id="SelectAccountBalance"  resultMap="AccountBalanceMap"  parameterClass="AccountBalance">
      select * from (
      select row_number() over(order by $OrderbyColomnName$  desc,$SubOrderbyColomnName$ desc) as RowNumber,
      av.[ID]
      ,av.[AccountID]
      ,[SubAccountNumber]
      ,link.CompanyName as AccountName
      ,[AccountType]
      ,[WebsiteID]
      ,[RegularMoney]
      ,[UnRegularMoney]
      ,[AmountMoney]
      ,[RegularMoneyVary]
      ,[UnRegularMoneyVary]
      ,[AmountMoneyVary]
      ,[Rate]
      ,[BalanceTime]
      from AccountBalanceVary av left join AccountAndNameLink link on av.AccountID=link.AccountID where 1=1
      <dynamic>
        <isParameterPresent>
          <isNotEmpty prepend="and" property="ID">ID=#ID#</isNotEmpty>
          <isNotEmpty prepend="and" property="AccountID">av.AccountID=#AccountID#</isNotEmpty>
          <isNotEmpty prepend="and" property="SubAccountNumber">SubAccountNumber=#SubAccountNumber#</isNotEmpty>
          <isNotEmpty prepend="and" property="AccountName">link.CompanyName=#AccountName#</isNotEmpty>
          <isGreaterThan prepend="and" property="AccountType" compareValue="-1">AccountType=#AccountType#</isGreaterThan>
          <isNotEmpty prepend="and" property="WebsiteID">WebsiteID=#WebsiteID#</isNotEmpty>
          <isNotEmpty prepend="and" property="BalanceTime">BalanceTime=#BalanceTime#</isNotEmpty>
        </isParameterPresent>
      </dynamic>
      )as result
      where 1=1
      <dynamic>
        <isParameterPresent>
          <isNotEmpty prepend="and" property="StartIndex"><![CDATA[result.RowNumber>=#StartIndex#]]></isNotEmpty>
          <isNotEmpty prepend="and" property="EndIndex"><![CDATA[result.RowNumber<=#EndIndex#]]></isNotEmpty>
        </isParameterPresent>
      </dynamic>
    </select>


    <procedure  id="SelectAccountBalanceTwoTime" parameterMap="AccountBalanceProcMap" resultMap="AccountBalanceMap"  >
      AccountBalanceVaryTwo
    </procedure >
    
    
    
    
    
    <insert id="BatchInsertAccountBalance" parameterClass="ArrayList">
      insert AccountBalanceVary(ID,AccountID,SubAccountNumber,AccountName,AccountType,WebsiteID,RegularMoney,UnRegularMoney,AmountMoney,RegularMoneyVary,UnRegularMoneyVary,AmountMoneyVary,Rate ,BalanceTime)
      values
      <iterate conjunction=",">
        ( #[].ID#,
        #[].AccountID#,
        #[].SubAccountNumber#,
        #[].AccountName#,
        #[].ZoneType#,
        #[].AccountType#,
        #[].RegularMoney#,
        #[].UnRegularMoney#,
        #[].AmountMoney#,
        #[].RegularMoneyVary#,
        #[].UnRegularMoneyVary#,
        #[].AmountMoneyVary#,
        #[].Rate#,
        #[].BalanceTime#
        )
      </iterate>
    </insert>

    <delete id="BatchDeleteAccountBalance" parameterClass="ArrayList">
      DELETE FROM AccountBalanceVary WHERE
      BalanceTime IN
      (
      <iterate conjunction=",">
        #[]#
      </iterate> 
      )
    </delete>
  </statements>
</sqlMap>